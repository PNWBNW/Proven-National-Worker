// ðŸ“Œ SubDAO CircleUSDC Reserve Contract
// Manages CircleUSDC payroll with withdrawal limits & auto-notifications.

import oversightdao_combined_reserve.noir;
import aleo_ans::*;

struct SubDAO_USDC_Pool {
    subdao_id: Field,
    subdao_ans: String,
    balance: u64,
}

// ðŸ”¹ Initialize SubDAO CircleUSDC Pool
let subdao_usdc_pools: Map<Field, SubDAO_USDC_Pool> = {};

// ðŸ”¹ Function: Deposit CircleUSDC for Payroll
fn deposit_circle_usdc(subdao_id: Field, employer_id: Field, amount: u64) {
    let subdao_ans = aleo_ans::get_ans(subdao_id);
    assert!(subdao_ans != "", "Invalid SubDAO ANS registration");

    if subdao_id in subdao_usdc_pools {
        subdao_usdc_pools[subdao_id].balance += amount;
    } else {
        subdao_usdc_pools[subdao_id] = SubDAO_USDC_Pool {
            subdao_id,
            subdao_ans,
            balance: amount,
        };
    }
}

// ðŸ”¹ Function: Process Payroll (Enforces 75% Withdrawal Cap)
fn process_circle_payroll(subdao_id: Field, worker_id: Field, amount: u64) -> bool {
    assert!(subdao_id in subdao_usdc_pools, "SubDAO not registered");

    let max_withdrawable = subdao_usdc_pools[subdao_id].balance * 75 / 100;
    assert!(amount <= max_withdrawable, "Cannot withdraw more than 75% of reserves");

    subdao_usdc_pools[subdao_id].balance -= amount;
    emit payroll_disbursement_event(subdao_id, worker_id, amount);

    // Auto-notify if balance falls below 50%
    if subdao_usdc_pools[subdao_id].balance < max_withdrawable / 1.5 {
        oversightdao_combined_reserve::notify_low_funds(subdao_id, subdao_usdc_pools[subdao_id].balance);
    }

    return true;
}

// ðŸ”¹ Function: Get SubDAO Balance
fn get_subdao_balance(subdao_id: Field) -> u64 {
    if subdao_id in subdao_usdc_pools {
        return subdao_usdc_pools[subdao_id].balance;
    }
    return 0;
}

// ðŸ”¹ Event Emitters
event payroll_disbursement_event(subdao_id: Field, worker_id: Field, amount: u64);
