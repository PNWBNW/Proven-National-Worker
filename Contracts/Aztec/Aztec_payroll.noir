// Aztec Payroll Contract for PNW
// Handles payroll processing for workers opting into Aztec-based payments with Circle USDC.

import aztec_std::*;
import aleo_zpass::*;
import aleo_ans::*;
import circle_usdc::*; // Import Circle USDC module

struct PayrollRecord {
    worker_id: Field,
    worker_ans: String,
    employer_id: Field,
    subdao_id: Field,
    subdao_ans: String,
    amount: u64,
    tax_withheld: u64,
    trust_fund_contribution: u64,
    subdao_expense_fee: u64,
    net_payout: u64,
    timestamp: u64,
}

// ðŸ”¹ Worker Payroll Processing (Now Only Circle USDC)
fn process_payroll(worker_id: Field, employer_id: Field, subdao_id: Field, amount: u64, trust_contribution_rate: u64) -> PayrollRecord {
    // Ensure worker and employer have valid ZPass verification
    assert!(aleo_zpass::is_verified(worker_id), "Worker must be ZPass verified");
    assert!(aleo_zpass::is_verified(employer_id), "Employer must be ZPass verified");

    // Ensure worker and SubDAO have valid ANS registrations
    let worker_ans = aleo_ans::get_ans(worker_id);
    let subdao_ans = aleo_ans::get_ans(subdao_id);
    assert!(worker_ans != "", "Worker must be registered with ANS");
    assert!(subdao_ans != "", "SubDAO must be registered with ANS");

    // Compute automated tax amount
    let tax_rate = get_tax_rate(employer_id);
    let tax_withheld = (amount * tax_rate) / 100;

    // Compute trust fund contribution
    let trust_fund_contribution = (amount * trust_contribution_rate) / 100;

    // Compute SubDAO expense fee (0.1% of payroll value)
    let subdao_expense_fee = (amount * 1) / 1000;

    // Calculate net payout after deductions
    let net_payout = amount - tax_withheld - trust_fund_contribution - subdao_expense_fee;

    // Create payroll record (Only Circle USDC)
    let payroll_record = PayrollRecord {
        worker_id,
        worker_ans,
        employer_id,
        subdao_id,
        subdao_ans,
        amount,
        tax_withheld,
        trust_fund_contribution,
        subdao_expense_fee,
        net_payout,
        timestamp: get_current_timestamp(),
    };

    // Emit payroll event with all deductions
    emit payroll_event(worker_id, worker_ans, employer_id, subdao_id, subdao_ans, amount, tax_withheld, trust_fund_contribution, subdao_expense_fee, net_payout);

    return payroll_record;
}

// ðŸ”¹ SubDAO Batch Payroll Execution
fn execute_batch_payroll(payroll_records: Vec<PayrollRecord>) {
    for record in payroll_records.iter() {
        verify_compliance(record);
        transfer_funds(record);
    }
}

// ðŸ”¹ Compliance Verification
fn verify_compliance(record: PayrollRecord) {
    assert!(record.tax_withheld >= get_min_tax(record.employer_id), "Tax compliance failure");
}

// ðŸ”¹ Payroll Fund Transfers (Circle USDC Only)
fn transfer_funds(record: PayrollRecord) {
    circle_usdc::transfer(record.worker_id, record.net_payout);
    circle_usdc::transfer(tax_authority(), record.tax_withheld);
    circle_usdc::transfer(aleo_trust_fund_address(record.worker_id), record.trust_fund_contribution);
    circle_usdc::transfer(record.subdao_id, record.subdao_expense_fee); // Transfer 0.1% to SubDAO expense fund
}

// ðŸ”¹ Utility Functions
fn get_tax_rate(employer_id: Field) -> u64 {
    return query_tax_rate(employer_id);
}

fn get_min_tax(employer_id: Field) -> u64 {
    return query_tax_rate(employer_id);
}

fn aleo_trust_fund_address(worker_id: Field) -> Field {
    return get_trust_fund_address(worker_id);
}

fn tax_authority() -> Field {
    return get_tax_address();
}
